{"version":3,"file":"js/main.js","mappings":"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","sources":["webpack://project_express/./src/public/js/CartComp.js","webpack://project_express/./src/public/js/ErrorComp.js","webpack://project_express/./src/public/js/main.js","webpack://project_express/./src/public/js/ProducComp.js","webpack://project_express/./src/public/js/FilterComp.js","webpack://project_express/./src/public/index.js"],"sourcesContent":["const cartItem = {\r\n    props: ['cartItem', 'img'],\r\n    template:\r\n        /*html*/\r\n        `        <div class=\"cart-item\">\r\n                    <div class=\"product-bio\">\r\n                        <img :src=\"img\" alt=\"Some image\">\r\n                        <div class=\"product-desc\">\r\n                            <p class=\"product-title\">{{cartItem.product_name}}</p>\r\n                            <p class=\"product-quantity\">Количество: {{cartItem.quantity}}</p>\r\n                            <p class=\"product-single-price\">{{cartItem.price}}₽ за единицу</p>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"right-block\">\r\n                        <p class=\"product-price\">{{cartItem.quantity*cartItem.price}}₽</p>\r\n                        <button class=\"del-btn\" @click=\"$emit('remove', cartItem)\">&times;</button>\r\n                        <button class=\"del-btn\" @click=\"$emit('add', cartItem)\" style=\"background-color:green\">+</button>\r\n                    </div>\r\n                </div>\r\n    `\r\n};\r\n\r\nconst cart = {\r\n    components: { cartItem },\r\n    data() {\r\n        return {\r\n            imgCart: 'https://via.placeholder.com/50x100',\r\n            cartItems: [],// array for cart\r\n            showCart: false,// on click make cart visible/invisible\r\n            amount: 0,\r\n            countGoods: 0\r\n        }\r\n    },\r\n\r\n    mounted() {\r\n        this.$parent.getJson('/api/cart')\r\n            .then(data => {\r\n                for (let el of data.contents) {\r\n                    this.cartItems.push(el);\r\n\r\n                    this.amount = data.amount;\r\n                    this.countGoods = data.countGoods;\r\n                }\r\n            });\r\n    },\r\n\r\n    template:\r\n        // :key - for correct work v-for, :cartItem and :img- for props in \"cart-item\" components\r\n        /*html*/\r\n        ` <div>\r\n        <button class=\"btn-cart\" type=\"button\" @click=\"showCart = !showCart\">Корзина</button>\r\n        <div class=\"cart-block\" v-show=\"showCart\">\r\n            <p v-if=\"!cartItems.length\">Корзина пуста</p>\r\n            <cart-item class=\"cart-item\" \r\n            v-for=\"item of cartItems\" \r\n            :key=\"item.id_product\"\r\n            :cartItem=\"item\" \r\n            :img=\"imgCart\"\r\n            @remove=\"remove\"\r\n            @add=\"addProduct\">\r\n            </cart-item>\r\n            <!--If cartItems.length exist- we show this div-->\r\n            <div  class=\"cart-item\" v-if=\"cartItems.length\">\r\n            <h3>Итого {{amount}}</h3>\r\n            <button class=\"del-btn\" @click=\"clearCart\">Clear cart</button>\r\n            </div>\r\n        </div>\r\n    </div>`,\r\n    methods: {\r\n        addProduct(product) { // try to find in cartItems our product by id\r\n            let find = this.cartItems.find(el => el.id_product === product.id_product);\r\n            if (find) {// if true\r\n                this.$parent.putJson(`/api/cart/${find.id_product}`, { quantity: 1 })\r\n                    .then(data => {\r\n                        if (data.result === 1) {\r\n                            this.amount = data.Cart.amount;\r\n                        }\r\n                    });\r\n                find.quantity++;\r\n                const sumPrice = find.price * find.quantity;\r\n\r\n            } else {// if this product doesn't exsist in cartItems-make a copy of product using Object.assign and add quantity:1\r\n                let prod = Object.assign({ quantity: 1 },\r\n                    { sumPrice: product.price }, product);\r\n                this.$parent.postJson('/api/cart', prod)// go to main.js and call postJSON \r\n                    .then(data => {\r\n                        if (data.result === 1) {\r\n                            this.cartItems.push(prod);\r\n                            this.amount = data.Cart.amount\r\n                        }\r\n                    });\r\n            }\r\n        },\r\n        remove(item) {\r\n            if (item.quantity > 1) {\r\n                this.$parent.putJson(`/api/cart/${item.id_product}`, { quantity: -1 })\r\n                    .then(data => { // дата это { \"result\": 1, Cart } из hanler.js\r\n                        if (data.result === 1) {\r\n                            item.quantity--;\r\n                            this.amount = data.Cart.amount;\r\n                        }\r\n                    });\r\n\r\n            } else {\r\n                this.$parent.deleteJson(`/api/cart/${item.id_product}`)\r\n                    .then(data => {\r\n                        if (data.result === 1) {\r\n                            this.cartItems.splice(this.cartItems.indexOf(item), 1);\r\n                            this.amount = data.Cart.amount;\r\n                        }\r\n                    });\r\n\r\n            }\r\n        },\r\n        clearCart() {\r\n            this.$parent.deleteJson('/api/cart/clear') // go to main.js and take getJSON(), as arg insert api/cart/clear\r\n                .then(data => {// if OK we get data from userCart.json\r\n                    this.cartItems = data.Cart.contents;\r\n                });\r\n        },\r\n    },\r\n};\r\n\r\n// export cart outside\r\nexport default cart;","const error = {\r\n    data() {\r\n        return {\r\n            text: ''\r\n        }\r\n    },\r\n    template: /*html*/`\r\n    <!--if isVisible === true we show this div-->\r\n    <div class=\"error-block\" v-if=\"isVisible\"> \r\n        <p class=\"error-msg\">\r\n        <!-- we use '' in serError couse there will be a string -->\r\n            <button class=\"close-btn\" @click=\"setError('')\">&times;</button>\r\n            {{ text }}\r\n        </p>\r\n    </div>\r\n    `,\r\n    methods: {\r\n        setError(error) {\r\n            this.text = error // substitude a text of the error\r\n        }\r\n    },\r\n    computed: {\r\n        isVisible() {\r\n            return this.text !== '' // if this.text not empty return 'true' and if vice versa 'false'\r\n        }\r\n    },\r\n\r\n};\r\n\r\nexport default error;","// import all ours moduls\r\nimport cart from './CartComp.js'\r\nimport products from './ProducComp.js'\r\nimport search from './FilterComp.js'\r\nimport error from './ErrorComp.js'\r\n\r\nconst app = {\r\n    el: '#app', // connect app whith html\r\n    // add this components\r\n    components: {\r\n        cart,\r\n        products,\r\n        error,\r\n        search,\r\n    },\r\n    methods: {\r\n        getJson(url) {\r\n            return fetch(url)\r\n                .then(result => result.json())\r\n                .catch(error => {\r\n                    this.$refs.error.setError(error);\r\n                })\r\n        },\r\n        postJson(url, data) {\r\n            return fetch(url, { // go to server.js\r\n                method: 'POST',\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify(data) // body of our request\r\n            }).then(result => result.json())\r\n                .catch(error => {\r\n                    this.$refs.error.setError(error);\r\n                });\r\n        },\r\n        putJson(url, data) {\r\n            return fetch(url, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify(data)// body of our request\r\n            }).then(result => result.json())\r\n                .catch(error => {\r\n                    this.$refs.error.setError(error);\r\n                });\r\n        },\r\n        deleteJson(url) {\r\n            return fetch(url, {\r\n                method: 'DELETE',\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n            }).then(result => result.json())\r\n                .catch(error => {\r\n                    this.$refs.error.setError(error);\r\n                });\r\n        },\r\n    },\r\n};\r\n\r\n// export app outside\r\nexport default app;","const product = {\r\n    props: ['product', 'img'],\r\n\r\n    template: /*html*/ `\r\n    <div class=\"product-item\">\r\n                <img :src=\"img\" alt=\"Some img\">\r\n                <div class=\"desc\">\r\n                    <h3>{{product.product_name}}</h3>\r\n                    <p>{{product.price}}₽</p>\r\n                    <button class=\"buy-btn\" @click=\"$root.$refs.cart.addProduct(product)\">Купить</button>\r\n<!-- 2                    <button class=\"buy-btn\" @click=\"$parent.$parent.$refs.cart.addProduct(product)\">Купить</button>-->\r\n                </div>\r\n            </div>\r\n    `\r\n};\r\n\r\n\r\nconst products = {\r\n    components: { product },// connect with product component\r\n\r\n    data() {\r\n        return {\r\n            products: [],// массив для продуктов каталога\r\n            filtered: [],// массив для отфильтрованных товаров(каталог отрисовывается через него)\r\n            imgCatalog: 'https://via.placeholder.com/200x150',// заглушка картинки\r\n        }\r\n    },\r\n    // монтируем катaлог\r\n    mounted() {// идем в main.js достаем метод getJson и подтсавляем /api/products\r\n        this.$parent.getJson('/api/products')// если запрос прошел- ответ записывается в data\r\n            .then(data => {// обрабатываем ответ\r\n                for (let el of data) {// проходимся по массиву и каждый елемент...\r\n                    this.products.push(el);//пушим в products \r\n                    this.filtered.push(el);//пушим в filtered (из него будем отрисовывать)\r\n                }\r\n            });\r\n    },\r\n    methods: {\r\n        filter(userSearch) {\r\n            let regexp = new RegExp(userSearch, 'i');// create a regexp\r\n            // to filtered we put all items ib products which match our regexp\r\n            this.filtered = this.products.filter(el => regexp.test(el.product_name));\r\n        }\r\n    },\r\n\r\n    template: /*html*/ `\r\n        <div class=\"products\">\r\n        <!--:product=\"itev\"- this we send to ProductComp as a props-->\r\n            <product v-for=\"item of filtered\" :key=\"item.id_product\" :img=\"imgCatalog\" :product=\"item\"></product>\r\n        </div>\r\n    `\r\n};\r\n\r\n\r\n// export products outside\r\nexport default products;","const search = {\r\n\r\n    data() {\r\n        return {\r\n            userSearch: ''// field of search\r\n        }\r\n    },\r\n    template:/*html*/ `\r\n            <form action=\"#\" class=\"search-form\" @submit.prevent=\"$parent.$refs.products.filter(userSearch)\">\r\n            <!--Replaced event click to event input-->\r\n                <input type=\"text\" class=\"search-field\" v-model=\"userSearch\" @input=\"$parent.$refs.products.filter(userSearch)\">\r\n                <button class=\"btn-search\" type=\"submit\">\r\n                    <i class=\"fas fa-search\"></i>\r\n                </button>\r\n            </form>\r\n    `\r\n};\r\n\r\nexport default search;\r\n","\r\nimport appMain from './js/main.js'\r\nimport './css/normalize.css'// import scc work only with webpack\r\nimport './css/style.css'\r\n// import img from './image.png'if   we use img \r\n// import './css/style.sass'- if we want use sass, we need to plug sass-louder for webpack\r\n\r\nconst app = new Vue(appMain);\r\n\r\n"],"names":["cart","components","cartItem","props","template","data","imgCart","cartItems","showCart","amount","countGoods","mounted","this","$parent","getJson","then","contents","el","push","methods","addProduct","product","find","id_product","putJson","quantity","result","Cart","price","prod","Object","assign","sumPrice","postJson","remove","item","deleteJson","splice","indexOf","clearCart","text","setError","error","computed","isVisible","app","products","filtered","imgCatalog","filter","userSearch","regexp","RegExp","test","product_name","search","url","fetch","json","$refs","method","headers","body","JSON","stringify","Vue"],"sourceRoot":""}